@model Object
@using MvcControlsToolkit.Core.Templates
@using MvcControlsToolkit.Core.Views
@{
    var metaData = ViewData.ModelMetadata;
    var col = ViewData["Options"] as Column;
}
@if (col.ColumnConnection != null)
{
    if (col.ColumnConnection.QueryDisplay && ViewContext.IsFilterRendering())
    {
        <input asp-for="@Model" placeholder="@col.PlaceHolder" class="@(!string.IsNullOrEmpty(col.InputCssClass) ? col.InputCssClass : "full-cell")" />

    }
    else if (col.ColumnConnection is ColumnConnectionInfosStatic)
    {
        var infos = col.ColumnConnection as ColumnConnectionInfosStatic;
        <select asp-for="@Model" asp-items="@(new SelectList(await infos.ItemsSelector(User), infos.ItemsValueProperty, infos.ItemsDisplayProperty))"
                class="@(!string.IsNullOrEmpty(col.InputCssClass) ? col.InputCssClass : "full-cell")">
            @if (col.PlaceHolder != null)
            {
                <option value="">@col.PlaceHolder</option>
            }
        </select>
    }
    else
    {
        var infos = col.ColumnConnection as ColumnConnectionInfosOnLine;
        
        <autocomplete for-explorer="@ViewData.ModelExplorer.GetExplorerForProperty(col.For.Name)"
                          display-explorer="@ViewData.ModelExplorer.GetExplorerForProperty(infos.DisplayProperty.Name)"
                        for-expression-override="@col.For.Name"
                        display-expression-override="@infos.DisplayProperty.Name"
                        items-display-property="@infos.ItemsDisplayProperty"
                        items-value-property="@infos.ItemsValueProperty"
                        items-url="@infos.ItemsUrl"
                        url-token="@infos.UrlToken"
                        dataset-name="@infos.DataSetName"
                        max-results="@infos.MaxResults"
                        class="@(!string.IsNullOrEmpty(col.InputCssClass) ? col.InputCssClass : "full-cell")" />
    }

}
else if (metaData.UnderlyingOrModelType == typeof(bool))
{
    <input asp-for="@Model" type="checkbox" class="@col.CheckboxCssClass"  />
}
else if (metaData.IsEnum)
{
    <select asp-for="@Model" asp-items="@Html.GetEnumSelectList(metaData.ModelType)" class="@(!string.IsNullOrEmpty(col.InputCssClass) ? col.InputCssClass : "full-cell")">
        @if (col.PlaceHolder != null)
                {
            <option value="">@col.PlaceHolder</option>
        }
    </select>
}
else
{
    <input asp-for="@Model" placeholder="@col.PlaceHolder" class="@(!string.IsNullOrEmpty(col.InputCssClass) ? col.InputCssClass : "full-cell")" />
}


