@model Object
@using MvcControlsToolkit.Core.Templates
@using Microsoft.Extensions.Options
@using System.Text
@using System.Globalization
@inject IOptions<MvcViewOptions> optionsAccessor
@inject IHtmlGenerator generator
@{
    var metaData = ViewData.ModelMetadata;
    var col = ViewData["Options"] as Column;
    var IdAttributeDotReplacement = optionsAccessor.Value.HtmlHelperOptions.IdAttributeDotReplacement;
    

}
<div class="@col.GetTotalClass(SupportedGridSystems.Bootstrap3, true)">
    @if (col.ColumnConnection != null)
    {
        if (col.ColumnConnection is ColumnConnectionInfosStatic)
        {
            var infos = col.ColumnConnection as ColumnConnectionInfosStatic;
            <label asp-for="@Model" class="control-label"></label>
            <select asp-for="@Model" asp-items="@(new SelectList(await infos.ItemsSelector(User), infos.ItemsValueProperty, infos.ItemsDisplayProperty))"
                    class="@(!string.IsNullOrEmpty(col.InputCssClass) ? col.InputCssClass : "form-control")">
                @if (col.PlaceHolder != null)
                {
                    <option value="">@col.PlaceHolder</option>
                }
            </select>
            <span asp-validation-for="@Model" class="text-danger"></span>
        }
        else
        {
            var infos = col.ColumnConnection as ColumnConnectionInfosOnLine;
            var tagBuilder = generator.GenerateValidationMessage(ViewContext, col.For.ModelExplorer, col.For.Name, null, "span", null);
            tagBuilder.AddCssClass("text-danger");
            <label for="@TagBuilder.CreateSanitizedId(ViewData.TemplateInfo.GetFullHtmlFieldName(infos.DisplayProperty.Name), IdAttributeDotReplacement)" class="control-label">
                @infos.DisplayProperty.Metadata.GetDisplayName()
            </label>
            <autocomplete for-explorer="@col.For.ModelExplorer"
                          display-explorer="@infos.DisplayProperty.ModelExplorer"
                          for-expression-override="@col.For.Name"
                          display-expression-override="@infos.DisplayProperty.Name"
                          items-display-property="@infos.ItemsDisplayProperty"
                          items-value-property="@infos.ItemsValueProperty"
                          items-url="@infos.ItemsUrl"
                          url-token="@infos.UrlToken"
                          dataset-name="@infos.DataSetName"
                          max-results="@infos.MaxResults"
                          class="@(!string.IsNullOrEmpty(col.InputCssClass) ? col.InputCssClass : "form-control")" />

            tagBuilder.WriteTo(ViewContext.Writer, HtmlEncoder);
        }

    }
    else if (metaData.UnderlyingOrModelType == typeof(bool))
    {
        <label asp-for="@Model">@col.For.Metadata.GetDisplayName()</label>
        <p @Html.Raw("class='" + (col.InputCssClass != null ? col.CheckboxCssClass : "form-control-static") + "'")>
            <input asp-for="@Model" type="checkbox"  />
        </p>


    }
    else if (metaData.IsEnum)
    {
        
        
        <label asp-for="@Model">@col.For.Metadata.GetDisplayName()</label>
            <select asp-for="@Model" asp-items="@Html.GetEnumSelectList(metaData.ModelType)" class="@(!string.IsNullOrEmpty(col.InputCssClass) ? col.InputCssClass : "form-control")">
                @if (col.PlaceHolder != null)
                {
                    <option value="">@col.PlaceHolder</option>
                }
            </select>
            <span asp-validation-for="@Model" class="text-danger"></span>
            }
    else
    {
    <label asp-for="@Model">@col.For.Metadata.GetDisplayName()</label>
    <input asp-for="@Model" placeholder="@col.PlaceHolder" class="@(!string.IsNullOrEmpty(col.InputCssClass) ? col.InputCssClass : "form-control")" />
    <span asp-validation-for="@Model" class="text-danger"></span>
    }
</div>


