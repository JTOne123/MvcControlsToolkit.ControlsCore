@model Object
@using MvcControlsToolkit.Core.Templates
@using Microsoft.Extensions.Options
@using System.Text
@using System.Globalization
@inject IOptions<MvcViewOptions> optionsAccessor
@inject IHtmlGenerator generator
@{
    var metaData = ViewData.ModelMetadata;
    var col = ViewData["Options"] as Column;
    var IdAttributeDotReplacement = optionsAccessor.Value.HtmlHelperOptions.IdAttributeDotReplacement;
    var cssClass= col.ColumnCssClass??(metaData.UnderlyingOrModelType == typeof(bool) ? "checkbox" : "form-group");
    if(col.EditDetailWidths != null && col.EditDetailWidths.Length > 0)
    {
        var toBuild = new StringBuilder();
        toBuild.Append(cssClass);
        var allStyles = new string[] { "col-xs-", "col-sm-", "col-md-", "col-lg-" };
        for (int i=0; i< Math.Min(allStyles.Length, col.EditDetailWidths.Length); i++)
        {
            if (col.EditDetailWidths[i] ==0 || (i != 0 && col.EditDetailWidths[i] == col.EditDetailWidths[i - 1]))
            {
                continue;
            }
            toBuild.Append(" ");
            toBuild.Append(allStyles[i]);
            toBuild.Append(col.EditDetailWidths[i].ToString(CultureInfo.InvariantCulture));

        }
        cssClass = toBuild.ToString();
    }
    else
    {
        cssClass += " col-xs-12";
    }

}
<div class="@cssClass">
    @if (col.ColumnConnection != null)
    {
        if (col.ColumnConnection is ColumnConnectionInfosStatic)
        {
            var infos = col.ColumnConnection as ColumnConnectionInfosStatic;
            <label asp-for="@Model" class="control-label"></label>
            <select asp-for="@Model" asp-items="@(new SelectList(await infos.ItemsSelector(User), infos.ItemsValueProperty, infos.ItemsDisplayProperty))"
                    @Html.Raw("class='" + (col.InputCssClass != null ? col.InputCssClass : "form-control") + "'")>
                @if (col.PlaceHolder != null)
                {
                    <option value="">@col.PlaceHolder</option>
                }
            </select>
            <span asp-validation-for="@Model" class="text-danger"></span>
        }
        else
        {
            var infos = col.ColumnConnection as ColumnConnectionInfosOnLine;
            var tagBuilder = generator.GenerateValidationMessage(ViewContext, col.For.ModelExplorer, col.For.Name, null, "span", null);
            tagBuilder.AddCssClass("text-danger");
            <label for="@TagBuilder.CreateSanitizedId(ViewData.TemplateInfo.GetFullHtmlFieldName(infos.DisplayProperty.Name), IdAttributeDotReplacement)" class="control-label">
                @infos.DisplayProperty.Metadata.GetDisplayName()
            </label>
            <autocomplete asp-for="@col.For.Metadata.PropertyGetter(Model)"
                          display-property="@infos.DisplayProperty.Metadata.PropertyGetter(Model)"
                          for-expression-override="@col.For.Name"
                          display-expression-override="@infos.DisplayProperty.Name"
                          items-display-property="@infos.ItemsDisplayProperty"
                          items-value-property="@infos.ItemsValueProperty"
                          items-url="@infos.ItemsUrl"
                          url-token="@infos.UrlToken"
                          dataset-name="@infos.DataSetName"
                          max-results="@infos.MaxResults"
                          @Html.Raw("class='" + (col.InputCssClass != null ? col.InputCssClass : "form-control") + "'") />
                        @Html.Raw(tagBuilder.ToString())
        }

    }
    else if (metaData.UnderlyingOrModelType == typeof(bool))
    {
        <label asp-for="@Model">
            <input asp-for="@Model" type="checkbox" @Html.Raw(col.CheckboxCssClass != null ? "class='" + col.CheckboxCssClass + "'" : "") />
        </label>

    }
    else if (metaData.IsEnum)
    {
        <label asp-for="@Model" class="control-label"></label>
        <select asp-for="@Model" asp-items="@Html.GetEnumSelectList(metaData.ModelType)" @Html.Raw("class='" + (col.InputCssClass != null ? col.InputCssClass : "form-control") + "'")>
            @if (col.PlaceHolder != null)
            {
                <option value="">@col.PlaceHolder</option>
            }
        </select>
        <span asp-validation-for="@Model" class="text-danger"></span>
    }
    else
    {
        <label asp-for="@Model" class="control-label"></label>
        <input asp-for="@Model" placeholder="@col.PlaceHolder" @Html.Raw("class='" + (col.InputCssClass != null ? col.InputCssClass : "form-control") + "'") />
        <span asp-validation-for="@Model" class="text-danger"></span>
    }
    </div>


