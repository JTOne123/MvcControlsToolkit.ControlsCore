@model Object
@using MvcControlsToolkit.Core.Templates
@using MvcControlsToolkit.Core.TagHelpers
@using MvcControlsToolkit.Core.TagHelpersUtilities
@using MvcControlsToolkit.Core.Views
@using Microsoft.Extensions.Localization
@using System.Globalization
@{
    var row = ViewData["Options"] as RowType;
    var helpers = new ContextualizedHelpers(ViewContext, Html, User, Component, Url, ViewData["LocalizerFactory"] as IStringLocalizerFactory);
    bool hiddensToRender = true;
    var query = TagContextHelper.GetBindingContext(ViewContext.HttpContext, BindingContextNames.Query)?.Model as QueryDescription;
    
}
<tr @row.RenderRowAttributes(Model)>
    @if(row.MustAddButtonColumn(helpers, query))
    {
        var buttons=row.RequiredFunctionalitiesExt(User, query);
        var currProvider = ViewContext.TagHelperProvider();
        var localizer = row.GetLocalizer(helpers.LocalizerFactory);
        <td class="grid-buttons">
         @currProvider.RenderButton(StandardButtons.Undo, Model == null ? "add" : null, "btn-default btn-xs", helpers, localizer)
         @currProvider.RenderButton(StandardButtons.Save, null, "btn-default btn-xs", helpers, localizer)   
        </td>
    }
    @foreach(var col in row.ColumnsToRender(query))
    {
        <td @Html.Raw(col.ColumnCssClass != null ? "class='" +col.ColumnCssClass+"'": "")
                @Html.Raw(col.ColSpan.HasValue ? "colspan='"+col.ColSpan.Value.ToString(CultureInfo.InvariantCulture)+"'" : "")>
            @await row.RenderColumn(Model,col, !col.ReadOnly, helpers)
            @if (hiddensToRender)
                {
                    hiddensToRender = false;
                @row.RenderHiddens(helpers, Model)

            }
        </td>
    }
    
</tr>


